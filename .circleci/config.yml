version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  kubernetes: circleci/kubernetes@0.12.0
 
commands:
    kubeconfig:
      description: Fetch EKS-Cluster kubeconfig
      steps:
       - run:
          name: Setup kubeconfig
          command: aws eks update-kubeconfig --region eu-central-1 --name capstone-cluster2
jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Install Dependecies & Build
          command: |
            cd capstone-rc-frontend      
            yarn install --immutable
            yarn build    
      - save_cache:
          name: Save Node Modules
          paths: [capstone-rc-frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_SHA1 }}
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/unplugged          
  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ .Environment.CIRCLE_SHA1 }}
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run Tests
          command: |
            cd capstone-rc-frontend            
            CI=true yarn test             

  build-push-docker:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - restore_cache:
          keys:
            - frontend-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Lint Docker File      
          command: |
            cd capstone-rc-frontend
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint 
            ./hadolint Dockerfile.prod
      - run:
          name: Build Docker image
          command: |
            cd capstone-rc-frontend
            docker build -f Dockerfile.prod -t $DOCKER_USERNAME/capstone-app:$CIRCLE_WORKFLOW_ID .
      - run:
          name: Push Docker Image
          command: | 
            echo $DOCKER_PWD | docker login -u $DOCKER_USERNAME docker.io --password-stdin
            docker push $DOCKER_USERNAME/capstone-app:$CIRCLE_WORKFLOW_ID  
  deploy-green:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
         name: Deploy new version
         command: |
          sed -i 's@VERSION@'"$CIRCLE_WORKFLOW_ID"'@' deployment.yaml
          cat deployment.yaml
          kubectl apply -f deployment.yaml
  deploy-green-lb:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
          name: Deploy Green Load Balancer
          command: |
            sed -i 's@VERSION@'"$CIRCLE_WORKFLOW_ID"'@' load-balancer-green.yaml
            cat load-balancer-green.yaml
            kubectl apply -f load-balancer-green.yaml
  test-green-deployment:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
          name: Run Smoke Test | UAT
          command: |
            sleep 15
            export EXTERNAL_IP=$(kubectl get svc loadbalancer-green -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")
            echo $EXTERNAL_IP
            if curl -s http://$EXTERNAL_IP:5000
            then
              exit 0
            else
              exit 1
            fi  
      - run:  
          name: destroy-green-deployment
          when: on_fail
          command: |
            sed -i 's@VERSION@'"$CIRCLE_WORKFLOW_ID"'@' load-balancer-green.yaml
            kubectl delete -f load-balancer-green.yaml
            sed -i 's@VERSION@'"$CIRCLE_WORKFLOW_ID"'@' deployment.yaml
            kubectl delete -f deployment.yaml
  promote-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
          name: Update Blue LoadBalancer
          command: |
            sed -i 's@VERSION@'"$CIRCLE_WORKFLOW_ID"'@' load-balancer-blue.yaml
            cat load-balancer-blue.yaml
            kubectl apply -f load-balancer-blue.yaml
  smoke-test-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
          name: Smoke Test Production 
          command: |
            export EXTERNAL_IP=$(kubectl get svc loadbalancer-blue -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")
            if curl -s http://$EXTERNAL_IP
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Error Rollback   
          when: on_fail                
          command: |
            kubectl rollout undo deploy load-balancer-blue.yaml 
  clean-up:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubeconfig
      - run:
          name: Delete Green LoadBalancer
          command: |
            kubectl delete -f load-balancer-green.yaml
      - run:
          name: Delete Blue Deployment
          command: |
            export OLD_ID=$(curl -H "token: c5afee37-55fd-4f36-9755-26c740fd6fcf" --request GET https://api.memstash.io/values/capstone-app-version)
            sed -i 's@VERSION@'"$OLD_ID"'@' deployment.yaml
            kubectl delete -f deployment.yaml
      - run:
          name: Send New App Version To MemCache
          command: |
            curl -H "Content-Type: text/plain" -H "token: c5afee37-55fd-4f36-9755-26c740fd6fcf" \
              --request PUT \
              --data "$CIRCLE_WORKFLOW_ID" \
              https://api.memstash.io/values/capstone-app-version  
workflows:
  default-workflow:
    jobs:
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - build-push-docker:
         requires: [test-frontend]
      - deploy-green:
         requires: [build-push-docker]
      - deploy-green-lb:
         requires: [build-push-docker]
      - test-green-deployment:
         requires: [deploy-green,deploy-green-lb]
      - promote-production:
         requires: [test-green-deployment]
      - smoke-test-production:
          requires: [promote-production]
      - clean-up:
          requires: [smoke-test-production]  
